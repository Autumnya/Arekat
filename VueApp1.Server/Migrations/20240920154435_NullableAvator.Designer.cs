// <auto-generated />
using System;
using Arekat.Server;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Arekat.Server.Migrations
{
    [DbContext(typeof(BaseContext))]
    [Migration("20240920154435_NullableAvator")]
    partial class NullableAvator
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Arekat.Server.Models.Artist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("Name");

                    b.ToTable("Artists");
                });

            modelBuilder.Entity("Arekat.Server.Models.Badge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgSrc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("Name");

                    b.ToTable("Badge");
                });

            modelBuilder.Entity("Arekat.Server.Models.BaseUser", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AdminLevel")
                        .HasColumnType("int");

                    b.Property<string>("Avator")
                        .HasMaxLength(16777216)
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ChartDesignerLevel")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Intro")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsBanned")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LoginTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Guid");

                    b.HasIndex("Id");

                    b.HasIndex("Name");

                    b.ToTable("BaseUser");
                });

            modelBuilder.Entity("Arekat.Server.Models.Chart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Diffifulty")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DownloadTime")
                        .HasColumnType("int");

                    b.Property<int>("Game")
                        .HasColumnType("int");

                    b.Property<int>("IndexChartId")
                        .HasColumnType("int");

                    b.Property<bool>("IsChecked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStable")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PublishDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RatingClass")
                        .HasColumnType("int");

                    b.Property<int>("SongId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("SongId");

                    b.ToTable("Charts");
                });

            modelBuilder.Entity("Arekat.Server.Models.ChartHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ChartId")
                        .HasColumnType("int");

                    b.Property<string>("Discription")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<int>("Stage")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ChartId");

                    b.HasIndex("Id");

                    b.ToTable("ChartsHistory");
                });

            modelBuilder.Entity("Arekat.Server.Models.EmailVerifyKey", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<int>("QuestClass")
                        .HasColumnType("int");

                    b.Property<DateTime>("QuestTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReceiverEmail")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.ToTable("EmailVerifyKeys");
                });

            modelBuilder.Entity("Arekat.Server.Models.Notice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ArthorGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ArthorId")
                        .HasColumnType("int");

                    b.Property<string>("HtmlText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PublishTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("ReadTime")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ArthorGuid");

                    b.ToTable("Notices");
                });

            modelBuilder.Entity("Arekat.Server.Models.Song", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Bpm")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("Title");

                    b.ToTable("Songs");
                });

            modelBuilder.Entity("Arekat.Server.Models.StoreUid", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("Guid");

                    b.HasIndex("Id");

                    b.ToTable("StoreUids");
                });

            modelBuilder.Entity("ArtistSong", b =>
                {
                    b.Property<int>("ArtistId")
                        .HasColumnType("int");

                    b.Property<int>("SongsId")
                        .HasColumnType("int");

                    b.HasKey("ArtistId", "SongsId");

                    b.HasIndex("SongsId");

                    b.ToTable("ArtistSong");
                });

            modelBuilder.Entity("BadgeBaseUser", b =>
                {
                    b.Property<int>("BadgesId")
                        .HasColumnType("int");

                    b.Property<Guid>("OwnersGuid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BadgesId", "OwnersGuid");

                    b.HasIndex("OwnersGuid");

                    b.ToTable("BadgeBaseUser");
                });

            modelBuilder.Entity("BaseUserChart", b =>
                {
                    b.Property<int>("ChartsId")
                        .HasColumnType("int");

                    b.Property<Guid>("DesignerGuid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ChartsId", "DesignerGuid");

                    b.HasIndex("DesignerGuid");

                    b.ToTable("BaseUserChart");
                });

            modelBuilder.Entity("Arekat.Server.Models.Chart", b =>
                {
                    b.HasOne("Arekat.Server.Models.Song", "Song")
                        .WithMany("Charts")
                        .HasForeignKey("SongId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Song");
                });

            modelBuilder.Entity("Arekat.Server.Models.ChartHistory", b =>
                {
                    b.HasOne("Arekat.Server.Models.Chart", "Chart")
                        .WithMany("History")
                        .HasForeignKey("ChartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chart");
                });

            modelBuilder.Entity("Arekat.Server.Models.Notice", b =>
                {
                    b.HasOne("Arekat.Server.Models.BaseUser", "Arthor")
                        .WithMany("Notices")
                        .HasForeignKey("ArthorGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Arthor");
                });

            modelBuilder.Entity("ArtistSong", b =>
                {
                    b.HasOne("Arekat.Server.Models.Artist", null)
                        .WithMany()
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Arekat.Server.Models.Song", null)
                        .WithMany()
                        .HasForeignKey("SongsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BadgeBaseUser", b =>
                {
                    b.HasOne("Arekat.Server.Models.Badge", null)
                        .WithMany()
                        .HasForeignKey("BadgesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Arekat.Server.Models.BaseUser", null)
                        .WithMany()
                        .HasForeignKey("OwnersGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BaseUserChart", b =>
                {
                    b.HasOne("Arekat.Server.Models.Chart", null)
                        .WithMany()
                        .HasForeignKey("ChartsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Arekat.Server.Models.BaseUser", null)
                        .WithMany()
                        .HasForeignKey("DesignerGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Arekat.Server.Models.BaseUser", b =>
                {
                    b.Navigation("Notices");
                });

            modelBuilder.Entity("Arekat.Server.Models.Chart", b =>
                {
                    b.Navigation("History");
                });

            modelBuilder.Entity("Arekat.Server.Models.Song", b =>
                {
                    b.Navigation("Charts");
                });
#pragma warning restore 612, 618
        }
    }
}
